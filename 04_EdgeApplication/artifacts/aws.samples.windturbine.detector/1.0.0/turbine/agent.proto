//
// Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//

syntax = "proto3";

package AWS.SageMaker.Edge;

service Agent {
  //
  //  perform inference on a model.
  //
  // Note:
  //  1. users can chose to send the tensor data in the protobuf message or
  //       through a shared memory segment on a per tensor basis, the Predict
  //       method with handle the decode transparently.
  //  2. serializing large tensors into the protobuf message can be quite expensive,
  //       based on our measurements it is recommended to use shared memory of
  //       tenors larger than 256KB.
  //  3. SMEdge IPC server will not use shared memory for returning output tensors,
  //       i.e., the output tensor data will always send in byte form encoded
  //       in the tensors of PredictResponse.
  //  4. currently SMEdge IPC server cannot handle concurrent predict calls, all
  //       these call will be serialized under the hood. this shall be addressed
  //       in a later release.
  // Status Codes:
  //  1. OK - prediction is successful
  //  2. UNKNOWN - unknown error has occurred
  //  3. INTERNAL - an internal error has occurred
  //  4. NOT_FOUND - when model not found
  //  5. INVALID_ARGUMENT - when tenors types mismatch
  //
  rpc Predict(PredictRequest) returns (PredictResponse);
  //
  //  perform load for a model
  // Note:
  //  1. currently only local filesystem paths are supported for loading models.
  //  2. currently only one model could be loaded at any time, loading of multiple
  //       models simultaneously shall be implemented in the future.
  //  3. users are required to unload any loaded model to load another model.
  // Status Codes:
  //  1. OK - load is successful
  //  2. UNKNOWN - unknown error has occurred
  //  3. INTERNAL - an internal error has occurred
  //  4. NOT_FOUND - model doesn't exist at the url
  //  5. ALREADY_EXISTS - model with the same name is already loaded
  //  6. RESOURCE_EXHAUSTED - memory is not available to load the model
  //  7. FAILED_PRECONDITION - model package could not be loaded
  //
  rpc LoadModel(LoadModelRequest) returns (LoadModelResponse);
  //
  //  perform unload for a model
  // Status Codes:
  //  1. OK - unload is successful
  //  2. UNKNOWN - unknown error has occurred
  //  3. INTERNAL - an internal error has occurred
  //  4. NOT_FOUND - model doesn't exist
  //
  rpc UnLoadModel(UnLoadModelRequest) returns (UnLoadModelResponse);
  //
  //  lists the loaded models
  // Status Codes:
  //  1. OK - unload is successful
  //  2. UNKNOWN - unknown error has occurred
  //  3. INTERNAL - an internal error has occurred
  //
  rpc ListModels(ListModelsRequest) returns (ListModelsResponse);
  //
  //  describes a model
  // Status Codes:
  //  1. OK - load is successful
  //  2. UNKNOWN - unknown error has occurred
  //  3. INTERNAL - an internal error has occurred
  //  4. NOT_FOUND - model doesn't exist at the url
  //
  rpc DescribeModel(DescribeModelRequest) returns (DescribeModelResponse);
  //
  //  allows users to capture input and output tensors along with auxiliary data.
  // Status Codes:
  //  1. OK - data capture successfully initiated
  //  2. UNKNOWN - unknown error has occurred
  //  3. INTERNAL - an internal error has occurred
  //  5. ALREADY_EXISTS - capture initiated for the given `capture_id`
  //  6. RESOURCE_EXHAUSTED - buffer is full cannot accept any more requests.
  //  7. OUT_OF_RANGE - timestamp is in the future.
  //  8. INVALID_ARGUMENT - capture_id is not of expected format or input tensor paramater is invalid
  //  9. FAILED_PRECONDITION - Indicates failed network access, when using cloud for capture data.
  //
  rpc CaptureData(CaptureDataRequest) returns (CaptureDataResponse);
  //
  //  allows users to query status of capture data operation
  // Status Codes:
  //  1. OK - data capture successfully initiated
  //  2. UNKNOWN - unknown error has occurred
  //  3. INTERNAL - an internal error has occurred
  //  4. NOT_FOUND - given capture id doesn't exist.
  //
  rpc GetCaptureDataStatus(GetCaptureDataStatusRequest) returns (GetCaptureDataStatusResponse);
}

//
// Type represents the data type of the tensor.
//
enum DataType {
  UINT8 = 0;
  INT16 = 1;
  INT32 = 2;
  INT64 = 3;
  FLOAT16 = 4;
  FLOAT32 = 5;
  FLOAT64 = 6;
}

//
// TensorMetadata represents the metadata for a tensor
//    name - name of the tensor
//    data_type  - data type of the tensor
//    shape - array of dimensions of the tensor
//
message TensorMetadata {
  // declear tensor name as bytes to accept non-UTF-8 characters
  // https://developers.google.com/protocol-buffers/docs/proto#scalar
  bytes name = 1;
  DataType data_type = 2;
  repeated int32 shape = 3;
}

//
// SharedMemoryHandle represents a posix shared memory segment
//    offset - offset in bytes from the start of the shared memory segment.
//    segment_id - shared memory segment id corresponding to the posix shared memory segment.
//    size - size in bytes of shared memory segment to use from the offset position.
//
message SharedMemoryHandle {
  uint64 size = 1;
  uint64 offset = 2;
  uint64 segment_id = 3;
}

//
// Tensor represents a tensor, encoded as contiguous multi-dimensional array.
//    tensor_metadata - represents metadata of the shared memory segment
//    data_or_handle - represents the data of shared memory, this could be passed in two ways:
//                        a. send across the raw bytes of the multi-dimensional tensor array
//                        b. send a SharedMemoryHandle which contains the posix shared memory segment
//                            id and offset in bytes to location of multi-dimensional tensor array.
//
message Tensor {
  TensorMetadata tensor_metadata = 1; //optional in the predict request
  oneof data {
    bytes byte_data = 4;
    // will only be used for input tensors
    SharedMemoryHandle shared_memory_handle = 5;
  }
}

//
// Model represents the metadata of a model
//  url - url representing the path of the model
//  name - name of model
//  input_tensor_metadatas - TensorMetadata array for the input tensors
//  output_tensor_metadatas - TensorMetadata array for the output tensors
//
// Note:
//  1. input and output tensor metadata could empty for dynamic models.
//
message Model {
  string url = 1;
  string name = 2;
  repeated TensorMetadata input_tensor_metadatas = 3;
  repeated TensorMetadata output_tensor_metadatas = 4;
}

//
// request for Predict rpc call
//
message PredictRequest {
  string name = 1;
  repeated Tensor tensors = 2;
}

//
// response for Predict rpc call
//
message PredictResponse {
  repeated Tensor tensors = 1;
}

//
// request for LoadModel rpc call
//
message LoadModelRequest {
  string url = 1;
  string name = 2;  // Model name needs to match regex "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$"
}

//
// response for LoadModel rpc call
//
message LoadModelResponse {
  Model model = 1;
}

//
// request for UnLoadModel rpc call
//
message UnLoadModelRequest {
  string name = 1;  // Model name needs to match regex "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$"
}

//
// response for UnLoadModel rpc call
//
message UnLoadModelResponse {}

//
// request for ListModels rpc call
//
message ListModelsRequest {}

//
// response for ListModels rpc call
//
message ListModelsResponse {
  repeated Model models = 1;
}

//
// request for DescribeModel rpc call
//
message DescribeModelRequest {
  string name = 1;
}

//
// response for DescribeModel rpc call
//
message DescribeModelResponse {
  Model model = 1;
}

enum Encoding {
  CSV = 0;
  JSON = 1;
  NONE = 2;
  BASE64 = 3;
}

//
// AuxilaryData represents a payload of extra data to be capture along with inputs and outputs of inference
//  encoding - supports the encoding of the data
//  data - represents the data of shared memory, this could be passed in two ways:
//                        a. send across the raw bytes of the multi-dimensional tensor array
//                        b. send a SharedMemoryHandle which contains the posix shared memory segment id and
//                            offset in bytes to location of multi-dimensional tensor array.
//
message AuxilaryData {
  string name = 1;
  Encoding encoding = 2;
  oneof data {
    bytes byte_data = 3;
    SharedMemoryHandle shared_memory_handle = 4;
  }
}

//
// request for CaptureData rpc call
//
message CaptureDataRequest {
  string model_name = 1;
  string capture_id = 2; //uuid string
  Timestamp inference_timestamp = 3;
  repeated Tensor input_tensors = 4;
  repeated Tensor output_tensors = 5;
  repeated AuxilaryData inputs = 6;
  repeated AuxilaryData outputs = 7;
}

//
// response for CaptureData rpc call
//
message CaptureDataResponse {}

//
// request for GetCaptureDataStatus rpc call
//
message GetCaptureDataStatusRequest {
  string capture_id = 1;
}

enum CaptureDataStatus {
  FAILURE = 0;
  SUCCESS = 1;
  IN_PROGRESS = 2;
  NOT_FOUND = 3;
}

//
// response for GetCaptureDataStatus rpc call
//
message GetCaptureDataStatusResponse {
  CaptureDataStatus status = 1;
}

message Timestamp {
  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  int64 seconds = 1;

  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive.
  int32 nanos = 2;
}
